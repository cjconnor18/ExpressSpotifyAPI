<%- include('../partials/head.ejs') %>
<%- include('../partials/header.ejs') %>
<%- include('../partials/nav.ejs') %>

<p>Welcome to the Player</p>
<p id='play'>Play Random Now</p>
<% if(currentPlaylist.tracks.length > 0) { %>
  <% for (let i = 0; i < currentPlaylist.tracks.length; i++) { %>
    
    <div class="track" onclick="addSong( '<%= currentPlaylist.tracks[i].uriReference %>' )">
      <p><%= i+1 %>) <%= currentPlaylist.tracks[i].name %></p>
      <p><%= currentPlaylist.tracks[i].artist %></p>
      <p><%= currentPlaylist.tracks[i].uriReference %></p>
    </div>
    
  <% } %>
<% } %>


<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
<script src="https://sdk.scdn.co/spotify-player.js"></script>
<script>
  let access_token = <%- JSON.stringify(access_token) %>;
  let refresh_token = <%- JSON.stringify(refresh_token) %>;
  let currentPlaylist = <%- JSON.stringify(currentPlaylist) %>;
  let currentlyAddingTrack = false;
  let last5TracksPlayed = [];
  const last5MaxLength = (currentPlaylist.tracks.length > 5) ? 5:currentPlaylist.tracks.length - 1;
  let intervalTimeMinutes = 50;
  let intervalTime = 1000 * 60 * intervalTimeMinutes; //1000 ms per 1 sec and 60 sec per min
  let current_device_id = 0;
  const playButton = document.getElementById('play');
  let isPlayerPlaying = false;
  

  setInterval(newAccessToken, intervalTime);
  
  window.onSpotifyWebPlaybackSDKReady = () => {
    
    const player = new Spotify.Player({
      name: 'JukeboxPlayer',
      getOAuthToken: cb => { cb(access_token); }
    });
    // Error handling
    player.addListener('initialization_error', ({ message }) => { console.error(message); });
    player.addListener('authentication_error', ({ message }) => { console.error(message); });
    player.addListener('account_error', ({ message }) => { console.error(message); });
    player.addListener('playback_error', ({ message }) => { console.error(message); });

    // Playback status updates
    player.addListener('player_state_changed', state => { 
      console.log(state.track_window); 
      if(state.track_window.next_tracks.length === 0) {
        if(!currentlyAddingTrack) {
          currentlyAddingTrack = true;
          console.log('need more tracks');
          addToQueue();
        } else {
          console.log('already in process to add track');
        }
        
      }
    });
  
    // Ready
    player.addListener('ready', ({ device_id }) => {
      current_device_id = device_id;
      console.log('Ready with Device ID', device_id);
      playButton.addEventListener('click', () => startPlay('random', current_device_id),false);
    });

    // Not Ready
    player.addListener('not_ready', ({ device_id }) => {
      console.log('Device ID has gone offline', device_id);
      isPlayerPlaying = false;
    });


    player.connect();
  };

  function addSong(songURI) {
    if(!isPlayerPlaying) {
      startPlay(songURI);
    } else {
      currentlyAddingTrack = true;
      addToQueue(songURI);
    }
  }


  function startPlay(startTrackURI,currentPlayerId = current_device_id){
    currentlyAddingTrack = true;
    if(startTrackURI === 'random') {
      startTrackURI = randomSong();
    } else {
      console.log('not Random');
    }
    console.log('clicked');

    $.ajax({
      url: '/login/play',
      data: {
        'access_token': access_token,
        'device_id': current_device_id,
        'startTrackURI': startTrackURI
      }
    }).done( () => {
      last5TracksPlayed.push(startTrackURI);
      currentlyAddingTrack = false;
      isPlayerPlaying = true;

    }).fail(function(err) {
      console.log(err);
    });
    
  }

  function isLastFiveSongsPlayed(songURI) {
    if(last5TracksPlayed.length < 1) {
      return false;
    }
    console.log(last5TracksPlayed[0]);
    for (let i = 0; i < last5TracksPlayed.length; i++) {
      if(last5TracksPlayed[i] == songURI) {
        console.log('track is listed in last 5 tracks');
        return true;
      }
    }
    return false;
  }
  
  function randomSong() {
    let randomIndex = Math.floor(Math.random() * currentPlaylist.tracks.length);
    startTrackURI = currentPlaylist.tracks[randomIndex].uriReference;
    let isLastFive = isLastFiveSongsPlayed(startTrackURI);
    if(isLastFive) {
      return randomSong();
    } else {
      return startTrackURI;
    }
  }

  function addToQueue(songURI = 'random') {
    if(songURI === 'random') {
      songURI = randomSong();
    }
    
    console.log('added to queue');

    $.ajax({
      url: '/login/addToQueue',
      data: {
        'access_token': access_token,
        'uriReference': songURI
      }
    }).done(function(data) {
      console.log('added ' + songURI);
      last5TracksPlayed.push(songURI);
      if(last5TracksPlayed.length > last5MaxLength) {
        last5TracksPlayed.shift();
      }
      currentlyAddingTrack = false;

    }).fail(function(err) {
      console.log(err);
    });
  }

  function newAccessToken() {
    
    $.ajax({
      url: '/login/refresh_token',
      data: {
        'refresh_token': refresh_token
      }
    }).done(function(data) {
      access_token = data.access_token;
      

    }).fail(function(err) {
      console.log(err);
    });
  }

</script>
<%- include('../partials/footer.ejs') %>