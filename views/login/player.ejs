<%- include('../partials/head.ejs') %>
<%- include('../partials/header.ejs') %>
<%- include('../partials/nav.ejs') %>
<link rel="stylesheet" href="/styles/player.css" />

<p>Welcome to the Player</p>
<p id='play'>Play Random Now</p>

<% if(currentAllTracks.pages.length > 0) { %>
  
  <% for (let i = 0; i < currentAllTracks.pages.length; i++) { %>
    <% let pageNum = i; %>
    <% if (i === 0) { %>
      <div id="page<%= i %>" class="page">
    <% } else { %>
      <div id="page<%= i %>" class="displayNone">
    <% } %>
    <% for (let j = 0; j < currentAllTracks.pages[i].sections.length; j++)  { %>
      <% let sectionNum = j; 
       let displayLetter;
       let displayNum = 1;  
       switch (sectionNum) { 
        case 0: 
          displayLetter = 'A'; 
          break; 
        case 1: 
          displayLetter = 'B'; 
          break; 
        case 2: 
          displayLetter = 'C';
          break; 
        case 3: 
          displayLetter = 'D'; 
          break; 
        default: 
          displayLetter = 'ZZZZ'; 
       } %>
       <div class="section<%= displayLetter %>">
         <% for(let k = 0; k < currentAllTracks.pages[i].sections[j].twoTracks.length; k++) { %>
            <div class="displayContainer">
              <div class="selectOptions">
                <p class="selectNumTop"><%= displayNum %></p>
                <p class="selectLetter"><%= displayLetter %></p>
                <p class="selectNumBottom"><%= displayNum + 1 %></p>
              </div>
            
            <div class="twoTracks">
            <p class="track1 hove" onclick="addSong( '<%= currentAllTracks.pages[i].sections[j].twoTracks[k].track1.uriReference %>' )">
              <%= currentAllTracks.pages[i].sections[j].twoTracks[k].track1.name %>
            </p>
          
          
            <p class="artist"><%= currentAllTracks.pages[i].sections[j].twoTracks[k].artist %></p>
          
          <% displayNum++; %>
          <% if(currentAllTracks.pages[i].sections[j].twoTracks[k].track2.uriReference) { %>
            
              <p class="track2 hove" onclick="addSong( '<%= currentAllTracks.pages[i].sections[j].twoTracks[k].track2.uriReference %>' )">
                <%= currentAllTracks.pages[i].sections[j].twoTracks[k].track2.name %>
              </p>
            
          <% } else { %>
            
              <p class="track2">&nbsp;</p>  
            
          <% } %>  
          </div>
          </div>
          <% displayNum++; %>
         <% } %> 
        </div>
    <% } %>
    </div>
  <% } %>
  
<% } %>

<% if (currentAllTracks.pages.length > 1) { %>
  <button id="prevPage" class="displayNone" onclick="changePage('prev')">Previous Page</button>
  <button id="nextPage" class="nextPage" onclick="changePage('next')">Next Page</button>
  <div class="clearFloat"></div>
<% } %>



<%- include('../partials/footer.ejs') %>

<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
<script src="https://sdk.scdn.co/spotify-player.js"></script>
<script>
  let access_token = <%- JSON.stringify(access_token) %>;
  let refresh_token = <%- JSON.stringify(refresh_token) %>;
  let currentPlaylist = <%- JSON.stringify(currentAllTracks) %>;
  let currentAllTracks = <%- JSON.stringify(currentAllTracks) %>;
  let currentlyAddingTrack = false;
  let last5TracksPlayed = [];
  let currentPage = 0;
  let lastPage = currentAllTracks.pages.length -1;
  let pages = [];
  

  const last5MaxLength = (currentAllTracks.pages[0].sections.length > 1) ? 5:2;
  let nextUpList = [];
  let intervalTimeMinutes = 50;
  let intervalTime = 1000 * 60 * intervalTimeMinutes; //1000 ms per 1 sec and 60 sec per min
  let current_device_id = 0;
  const playButton = document.getElementById('play');
  let isPlayerPlaying = false;
  

  setInterval(newAccessToken, intervalTime);
  
  window.onSpotifyWebPlaybackSDKReady = () => {
    
    const player = new Spotify.Player({
      name: 'JukeboxPlayer',
      getOAuthToken: cb => { cb(access_token); }
    });
    // Error handling
    player.addListener('initialization_error', ({ message }) => { console.error(message); });
    player.addListener('authentication_error', ({ message }) => { console.error(message); });
    player.addListener('account_error', ({ message }) => { console.error(message); });
    player.addListener('playback_error', ({ message }) => { console.error(message); });

    // Playback status updates
    player.addListener('player_state_changed', state => { 
      console.log(state.track_window); 
      if(state.track_window.next_tracks.length === 0) {
        if(!currentlyAddingTrack) {
          currentlyAddingTrack = true;
          console.log('need more tracks');
          findNextSong();
          console.log(last5TracksPlayed);
        } else {
          console.log('already in process to add track');
          console.log(last5TracksPlayed);
        }
        
      }
    });
  
    // Ready
    player.addListener('ready', ({ device_id }) => {
      current_device_id = device_id;
      console.log('Ready with Device ID', device_id);
      playButton.addEventListener('click', () => startPlay('random', current_device_id),false);
    });

    // Not Ready
    player.addListener('not_ready', ({ device_id }) => {
      console.log('Device ID has gone offline', device_id);
      isPlayerPlaying = false;
    });


    player.connect();
  };

  function changePage(direction) {
    if(!pages.length > 0) {
      for(let i = 0; i < currentAllTracks.pages.length; i++) {
        let thisPage = document.getElementById('page' + i);
          pages.push(thisPage);
      }
    }
    if(direction === "next") {
      pages[currentPage].classList.remove('page');
      pages[currentPage].classList.add('displayNone');
      if(currentPage === 0) {
        document.getElementById('prevPage').classList.remove('displayNone');
        document.getElementById('prevPage').classList.add('prevPage');
      }
      currentPage++;
      pages[currentPage].classList.remove('displayNone');
      pages[currentPage].classList.add('page');
      if(currentPage === lastPage) {
        document.getElementById('nextPage').classList.remove('nextPage');
        document.getElementById('nextPage').classList.add('displayNone');
      }
    } else if(direction === "prev") {
      pages[currentPage].classList.remove('page');
      pages[currentPage].classList.add('displayNone');
      if(currentPage === lastPage) {
        document.getElementById('nextPage').classList.add('nextPage');
        document.getElementById('nextPage').classList.remove('displayNone');
      }
      currentPage--;
      pages[currentPage].classList.remove('displayNone');
      pages[currentPage].classList.add('page');
      if(currentPage === 0) {
        document.getElementById('prevPage').classList.remove('prevPage');
        document.getElementById('prevPage').classList.add('displayNone');
      }
    }
  }

  function addSong(songURI) {
    if(!isPlayerPlaying) {
      startPlay(songURI);
    } else {
      addSongToNextUp(songURI);
    }
  }

  function addSongToNextUp(songURI) {
    nextUpList.push(songURI);
    console.log(nextUpList);
  }

  function removeSongFromNextUp (songURI) {
    let indexOfSong = nextUpList.indexOf(songURI);
    nextUpList.splice(indexOfSong,1);
    console.log(nextUpList);
  }

  function findNextSong() {
    console.log(nextUpList);
    for(let i = 0; i < nextUpList.length; i++) {
      let matches = 0;
      for(let j = 0; j < last5TracksPlayed.length; j++) {
        if(nextUpList[i] === last5TracksPlayed[j]) {
          matches++;
        }
      }
      

      if(matches === 0) {
        return addToQueue(nextUpList[i]);
      }
    }
    return addToQueue();
  }


  function startPlay(startTrackURI,currentPlayerId = current_device_id){
    currentlyAddingTrack = true;
    if(startTrackURI === 'random') {
      startTrackURI = randomSong();
    } else {
      console.log('not Random');
    }
    console.log('clicked');

    $.ajax({
      url: '/login/play',
      data: {
        'access_token': access_token,
        'device_id': current_device_id,
        'startTrackURI': startTrackURI
      }
    }).done( () => {
      last5TracksPlayed.push(startTrackURI);
      
      isPlayerPlaying = true;
      setTimeout(() => {
        currentlyAddingTrack = false;
      }, 30000);

    }).fail(function(err) {
      console.log(err);
    });
    
  }

  function isLastFiveSongsPlayed(songURI) {
    if(last5TracksPlayed.length < 1) {
      return false;
    }
    console.log(last5TracksPlayed[0]);
    for (let i = 0; i < last5TracksPlayed.length; i++) {
      if(last5TracksPlayed[i] == songURI) {
        console.log('track is listed in last 5 tracks');
        return true;
      }
    }
    return false;
  }
  
  function randomSong() {
    //let randomIndex = Math.floor(Math.random() * currentPlaylist.tracks.length);
    //startTrackURI = currentPlaylist.tracks[randomIndex].uriReference;
    let firstRandomIndex = Math.floor(Math.random() * currentAllTracks.pages.length);
    let secondRandomIndex = Math.floor(Math.random() * currentAllTracks.pages[firstRandomIndex].sections.length);
    let thirdRandomIndex = Math.floor(Math.random() * currentAllTracks.pages[firstRandomIndex].sections[secondRandomIndex].twoTracks.length);
    let firstOrSecondTrack = Math.floor(Math.random() * 2);
    let startTrackURI;
    if(firstOrSecondTrack === 0 ) {
      startTrackURI = currentAllTracks.pages[firstRandomIndex].sections[secondRandomIndex].twoTracks[thirdRandomIndex].track1.uriReference;
    } else {
      startTrackURI = currentAllTracks.pages[firstRandomIndex].sections[secondRandomIndex].twoTracks[thirdRandomIndex].track2.uriReference;
    }
    let isLastFive = isLastFiveSongsPlayed(startTrackURI);
    if(isLastFive) {
      return randomSong();
    } else {
      return startTrackURI;
    }
  }

  function addToQueue(songURI = 'random') {
    let wasRandom = false;
    if(songURI === 'random') {
      wasRandom = true;
      songURI = randomSong();
    }
    
    console.log('added to queue');

    $.ajax({
      url: '/login/addToQueue',
      data: {
        'access_token': access_token,
        'uriReference': songURI
      }
    }).done(function(data) {
      console.log('added ' + songURI);
      last5TracksPlayed.push(songURI);
      if(last5TracksPlayed.length > last5MaxLength) {
        last5TracksPlayed.shift();
      }
      if(!wasRandom) {
        removeSongFromNextUp(songURI);
      }
      currentlyAddingTrack = false;

    }).fail(function(err) {
      console.log(err);
    });
  }

  function newAccessToken() {
    
    $.ajax({
      url: '/login/refresh_token',
      data: {
        'refresh_token': refresh_token
      }
    }).done(function(data) {
      access_token = data.access_token;
      

    }).fail(function(err) {
      console.log(err);
    });
  }

</script>
